@page "/"
@using Servicos;
@using Entidades;
@inject ServicoSingleton _servicoSingleton;
@inject ServicoScoped _servicoScoped;
@inject ServicoTransient _servicoTransient;
@implements IDisposable;

<PageTitle>Index</PageTitle>

<h1>@Titulo</h1>
<h2>Fui renderizado as @HoraRederizacao</h2>

@code {
    private string? Titulo { get; set; }
    private string? HoraRederizacao { get; set; }
   
    @* É um método de ciclo de vida do componente Blazor. Ele é chamado quando o componente é inicializado, 
    mas antes de ser renderizado pela primeira vez. 
    Este é o local ideal para colocar a lógica de inicialização que não depende de parâmetros do componente. *@
    protected override void OnInitialized()
    {
        Titulo = "Olá Mundo";
        HoraRederizacao = DateTime.Now.ToString("HH:mm:ss");
        Console.WriteLine($"OnInitialized {DateTime.Now.ToString("HH:mm:ss")}");
    }

    @* É um método do ciclo de vida de um componente Blazor. Ele é chamado quando o componente recebe novos parâmetros de seu componente pai, 
    mas antes do componente ser renderizado. Este é o local ideal para colocar a lógica que depende dos parâmetros do componente. *@
    protected override void OnParametersSet()
    {
        HoraRederizacao = DateTime.Now.ToString("HH:mm:ss");
        Console.WriteLine($"OnParametersSet {DateTime.Now.ToString("HH:mm:ss")}");
    }

    @* É um método do ciclo de vida de um componente Blazor. Ele é chamado após o componente ser renderizado e as alterações serem confirmadas no Document Object Model (DOM). 
    Este é o local ideal para interagir com o código JavaScript ou para realizar operações que dependem do renderização do componente. *@
    protected override void OnAfterRender(bool firstRender)
    {
        HoraRederizacao = DateTime.Now.ToString("HH:mm:ss");
        Console.WriteLine($"OnAfterRender {DateTime.Now.ToString("HH:mm:ss")}");
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");
    }
}